{"version":3,"sources":["components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["Lists","lists","style","margin","className","map","list","key","id","backgroundColor","boxShadow","src","avatar","alt","name","App","state","fetch","then","res","json","data","setState","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iMAsBeA,EApBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OACI,yBAAKC,MAAS,CAACC,OAAO,SAClB,gCAAQ,uCACR,yBAAKC,UAAY,OAChBH,EAAMI,KAAI,SAACC,GAAD,OACP,yBAAKF,UAAY,uDAAuDG,IAAKD,EAAKE,IAClF,yBAAKJ,UAAU,OAAOF,MAAS,CAACO,gBAAiB,UAAWC,UAAW,yBACnE,yBAAKN,UAAU,aACf,yBAAKO,IAAG,UAAKL,EAAKM,QAAUC,IAAM,KAClC,wBAAIT,UAAU,cAAcE,EAAKQ,eCWtCC,E,4MAnBXC,MAAQ,CACJf,MAAO,I,kEAEU,IAAD,OAChBgB,MAAM,wDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CAAErB,MAAOoB,OAE1BE,MAAMC,QAAQC,O,+BAInB,OACI,kBAAC,EAAD,CAAOxB,MAAOyB,KAAKV,MAAMf,Y,GAfnB0B,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.5402c01e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Lists = ({lists}) => {\r\n    return (\r\n        <div style = {{margin:\"50px\"}}>\r\n            <center><h1> List </h1></center>\r\n            <div className = 'row'>\r\n            {lists.map((list) => (\r\n                <div className = 'col-12 col-xs-12 col-md-6 col-xl-6 text-center mb-2 ' key={list.id}>\r\n                <div className=\"card\" style = {{backgroundColor: \"#FFFFFF\", boxShadow: \"1px 1px 2px 1px grey\"}}>\r\n                    <div className=\"card-body\">\r\n                    <img src={`${list.avatar}`} alt = \"\" />\r\n                    <h5 className=\"card-title\">{list.name}</h5>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Lists;","import React, {Component} from 'react';\r\nimport Lists from './components/Lists';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        lists: []\r\n    };\r\n    componentDidMount() {\r\n        fetch('https://5d11b2ce84e906001457646a.mockapi.io/testdata')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ lists: data })\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Lists lists={this.state.lists} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}